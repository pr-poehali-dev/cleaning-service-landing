import json
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ email –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤–æ–π HTML —Ç–∞–±–ª–∏—Ü—ã
    Args: event —Å httpMethod, body (JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏)
    Returns: HTTP response —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': '',
            'isBase64Encoded': False
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'Method not allowed'}),
            'isBase64Encoded': False
        }
    
    body_data = json.loads(event.get('body', '{}'))
    
    name = body_data.get('name', '')
    phone = body_data.get('phone', '')
    address = body_data.get('address', '')
    date = body_data.get('date', '')
    time = body_data.get('time', '')
    comment = body_data.get('comment', '')
    calculated_price = body_data.get('calculatedPrice')
    custom_services = body_data.get('customServices', '')
    selected_extras = body_data.get('selectedExtras', {})
    
    smtp_user = os.environ.get('SMTP_USER')
    smtp_password = os.environ.get('SMTP_PASSWORD')
    
    if not smtp_user or not smtp_password:
        return {
            'statusCode': 500,
            'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            'body': json.dumps({'error': 'SMTP credentials not configured'}),
            'isBase64Encoded': False
        }
    
    extras_labels = {
        'windows': '–ú—ã—Ç—å–µ –æ–∫–æ–Ω',
        'balcony': '–£–±–æ—Ä–∫–∞ –±–∞–ª–∫–æ–Ω–∞',
        'carpet': '–•–∏–º—á–∏—Å—Ç–∫–∞ –∫–æ–≤—Ä–∞',
        'furniture': '–•–∏–º—á–∏—Å—Ç–∫–∞ –º—è–≥–∫–æ–π –º–µ–±–µ–ª–∏',
        'appliances': '–ú—ã—Ç—å–µ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏',
        'chandelier': '–ú—ã—Ç—å–µ –ª—é—Å—Ç—Ä—ã',
        'afterRepair': '–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞',
        'disinfection': '–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è'
    }
    
    extras_html = ''
    if selected_extras:
        extras_list = [extras_labels.get(key, key) for key, value in selected_extras.items() if value]
        if extras_list:
            extras_html = '<br>'.join(extras_list)
        else:
            extras_html = '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'
    else:
        extras_html = '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'
    
    html_body = f'''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            body {{ font-family: Arial, sans-serif; background-color: #f5f5f5; padding: 20px; }}
            .container {{ max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
            h1 {{ color: #3B82F6; border-bottom: 3px solid #3B82F6; padding-bottom: 10px; margin-bottom: 30px; }}
            table {{ width: 100%; border-collapse: collapse; margin-top: 20px; }}
            td {{ padding: 12px; border-bottom: 1px solid #e5e5e5; }}
            .label {{ font-weight: bold; color: #374151; width: 40%; background-color: #f9fafb; }}
            .value {{ color: #1f2937; }}
            .price {{ font-size: 24px; font-weight: bold; color: #10B981; text-align: center; padding: 20px; background-color: #f0fdf4; border-radius: 8px; margin-top: 20px; }}
            .footer {{ margin-top: 30px; text-align: center; color: #6b7280; font-size: 12px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É–±–æ—Ä–∫—É</h1>
            <table>
                <tr>
                    <td class="label">üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</td>
                    <td class="value">{name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                </tr>
                <tr>
                    <td class="label">üì± –¢–µ–ª–µ—Ñ–æ–Ω:</td>
                    <td class="value">{phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                </tr>
                <tr>
                    <td class="label">üìç –ê–¥—Ä–µ—Å:</td>
                    <td class="value">{address or '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                </tr>
                <tr>
                    <td class="label">üìÖ –î–∞—Ç–∞:</td>
                    <td class="value">{date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td>
                </tr>
                <tr>
                    <td class="label">üïê –í—Ä–µ–º—è:</td>
                    <td class="value">{time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
                </tr>
                <tr>
                    <td class="label">‚ú® –î–æ–ø. —É—Å–ª—É–≥–∏:</td>
                    <td class="value">{extras_html}</td>
                </tr>
                {f'<tr><td class="label">üìù –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</td><td class="value">{custom_services}</td></tr>' if custom_services else ''}
                {f'<tr><td class="label">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</td><td class="value">{comment}</td></tr>' if comment else ''}
            </table>
            {f'<div class="price">üí∞ –†–∞—Å—á—ë—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {calculated_price} ‚ÇΩ</div>' if calculated_price else ''}
            <div class="footer">
                <p>–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç "–ß–∏—Å—Ç—ã–π –°—Ç–∞–Ω–¥–∞—Ä—Ç"</p>
                <p>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</p>
            </div>
        </div>
    </body>
    </html>
    '''
    
    msg = MIMEMultipart('alternative')
    msg['Subject'] = f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É–±–æ—Ä–∫—É –æ—Ç {name or "–∫–ª–∏–µ–Ω—Ç–∞"}'
    msg['From'] = smtp_user
    msg['To'] = 'ip-zhdanov@inbox.ru'
    
    html_part = MIMEText(html_body, 'html', 'utf-8')
    msg.attach(html_part)
    
    smtp_server = 'smtp.gmail.com' if 'gmail' in smtp_user else 'smtp.yandex.ru'
    smtp_port = 587
    
    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()
    server.login(smtp_user, smtp_password)
    server.send_message(msg)
    server.quit()
    
    return {
        'statusCode': 200,
        'headers': {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        },
        'body': json.dumps({'success': True, 'message': 'Email sent successfully'}),
        'isBase64Encoded': False
    }
